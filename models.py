from flask_sqlalchemy import SQLAlchemy

db = SQLAlchemy()

# Course model is pretty basic, just ID and name.

class Course(db.Model): 
    __tablename__ = 'course'
    course_id = db.Column(db.Integer, primary_key=True)
    course_title = db.Column(db.String(100), nullable=False, unique=True)

# Week has course ID as a foreign key because every course has multiple weeks. Plus the name, perhaps to indicate which topics will be covered.

class Week(db.Model): 
    __tablename__ = 'week'
    week_id = db.Column(db.Integer, primary_key=True)
    course_id = db.Column(db.Integer, db.ForeignKey('course.course_id'), nullable=False)
    week_name = db.Column(db.String(50), nullable=False)

# The ContentType table needs to exist because SQLite can't do enumerations. Instead, I store all types here, then use the ID to link with each piece of weekly content.

class WeeklyContentType(db.Model):
    __tablename__ = 'weekly_content_type'
    type_id = db.Column(db.Integer, primary_key=True)
    type = db.Column(db.String(35), nullable=False, unique=True)

# Information about each piece of weekly content, such as the week it belongs to, its type, title and its place in the sequence.

class WeeklyContent(db.Model): 
    __tablename__ = 'weekly_content'
    content_id = db.Column(db.Integer, primary_key=True)
    week_id = db.Column(db.Integer, db.ForeignKey('week.week_id'), nullable=False)
    content_type = db.Column(db.Integer, db.ForeignKey('weekly_content_type.type_id'), nullable=False)
    title = db.Column(db.String(50), nullable=False)
    sequence_no = db.Column(db.Integer, nullable=False)

# I used a composite foreign key here, because the combination of ID, title and sequence no. ALL need to be the same for every matching row, not just the ID. Rest is obvious.

class AssignmentContent(db.Model):
    __tablename__ = 'assignment_content'
    content_id = db.Column(db.Integer, nullable=False)
    week_id = db.Column(db.Integer, db.ForeignKey('week.week_id'), nullable=False)
    title = db.Column(db.String(100), nullable=False)
    sequence_no = db.Column(db.Integer, nullable=False)
    is_attempted = db.Column(db.Boolean, default=False)
    score = db.Column(db.Float)
    __tableargs__ = (db.ForeignKeyConstraint(['content_id', 'title', 'sequence_no'],['weekly_content.content_id', 'weekly_content.title', 'weekly_content.sequence_no']))

# Pretty much the same as above but with a deadline. Should we merge with the previous table and make deadline nullable?

class GradedAssignmentContent(db.Model):
    __tablename__ = 'graded_assignment_content'
    content_id = db.Column(db.Integer, nullable=False)
    week_id = db.Column(db.Integer, db.ForeignKey('week.week_id'), nullable=False)
    title = db.Column(db.String(100), nullable=False)
    sequence_no = db.Column(db.SmallInteger)
    is_submitted = db.Column(db.Boolean, default=False)
    deadline = db.Column(db.DateTime)
    score = db.Column(db.Float)
    __tableargs__ = (db.ForeignKeyConstraint(['content_id', 'title', 'sequence_no'],['weekly_content.content_id', 'weekly_content.title', 'weekly_content.sequence_no']))

# Similar to the above, but now there's a problem statement because coding.

class ProgrammingAssignmentContent(db.Model):
    __tablename__ = 'programming_assignment_content'
    content_id = db.Column(db.Integer, primary_key=True)
    week_id = db.Column(db.Integer, db.ForeignKey('week.week_id'), nullable=False)
    title = db.Column(db.String(200), nullable=False)
    sequence_no = db.Column(db.Integer, nullable=False)
    is_attempted = db.Column(db.Boolean, default=False)
    problem_statement = db.Column(db.Text)
    score = db.Column(db.Float)
    __tableargs__ = (db.ForeignKeyConstraint(['content_id', 'title', 'sequence_no'],['weekly_content.content_id', 'weekly_content.title', 'weekly_content.sequence_no']))

# Again pretty much the same as above but with a deadline. Should we merge with the previous table and make deadline nullable?

class GradedProgrammingAssignmentContent(db.Model):
    __tablename__ = 'programming_assignment_content'
    content_id = db.Column(db.Integer, primary_key=True)
    week_id = db.Column(db.Integer, db.ForeignKey('week.week_id'), nullable=False)
    title = db.Column(db.String(200), nullable=False)
    sequence_no = db.Column(db.Integer, nullable=False)
    is_submitted = db.Column(db.Boolean, default=False)
    problem_statement = db.Column(db.Text)
    deadline = db.Column(db.DateTime)
    score = db.Column(db.Float)
    __tableargs__ = (db.ForeignKeyConstraint(['content_id', 'title', 'sequence_no'],['weekly_content.content_id', 'weekly_content.title', 'weekly_content.sequence_no']))

# Storing MCQs generated by the AI, and the IDs of the students who saved them.

class SavedMCQ(db.Model):
    __tablename__ = 'saved_mcq'
    saved_question_id = db.Column(db.Integer, primary_key=True)
    saved_question_text = db.Column(db.String(400), nullable=False)
    saved_by = db.Column(db.Integer, db.ForeignKey('student.student_id'), nullable=False)
    week_id = db.Column(db.Integer, db.ForeignKey('week.week_id'), nullable=False)

# Options for each of the aforementioned saved MCQs.

class SavedMCQOption(db.Model):
    __tablename__ = 'saved_mcq_option'
    saved_option_id = db.Column(db.Integer, primary_key=True)
    saved_question_id = db.Column(db.Integer, db.ForeignKey('saved_mcq.saved_question_id'), nullable=False)
    saved_option_text = db.Column(db.String(200), nullable=False)
    is_correct = db.Column(db.Boolean, default=False)

# Merged the models for both regular and graded test cases into one because there just wasn't any difference at all. 

class TestCase(db.Model):
    __tablename__ = 'test_case'
    test_case_id = db.Column(db.Integer, primary_key=True)
    assignment_id = db.Column(db.Integer, db.ForeignKey('weekly_content.content_id'), nullable=False)
    input_text = db.Column(db.Text, nullable=False)
    expected_output_text = db.Column(db.Text, nullable=False)
    memory_limit = db.Column(db.Integer)
    time_limit = db.Column(db.Integer)

# Regular, static MCQs.

class MCQ(db.Model):
    __tablename__ = 'mcq'
    question_id = db.Column(db.Integer, primary_key=True)
    assignment_id = db.Column(db.Integer, db.ForeignKey('weekly_content.content_id'), nullable=False)
    question_text = db.Column(db.String(400), nullable=False)
    question_score = db.Column(db.Integer)

# Options for each regular, static MCQ.

class MCQOption(db.Model):
    __tablename__ = 'mcq_option'
    option_id = db.Column(db.Integer, primary_key=True)
    question_id = db.Column(db.Integer, db.ForeignKey('mcq.question_id'), nullable=False)
    option_text = db.Column(db.String(200), nullable=False)
    is_correct = db.Column(db.Boolean, default=False)

# User ID and name. OpenAuth handles the authentication details, I assume?

class Student(db.Model):
    __tablename__ = 'student'
    student_id = db.Column(db.Integer, primary_key=True)
    student_name = db.Column(db.String(100), nullable=False)

# I'm unsure about this table. We can simply store the results for each assignment in their respective rows in the assignment content tables -
# I've added a new column to each of them for just that purpose. If it is instead supposed to be like an answer key, then... hm, we're already
# storing in the MCQOption table whether each option is correct, so I'd appreciate clarification as to why this is needed.

class GradedMCQResult(db.Model):
    __tablename__ = 'graded_mcq_result'
    result_id = db.Column(db.Integer, primary_key=True)
    student_id = db.Column(db.Integer, db.ForeignKey('student.student_id'), nullable=False)
    assignment_id = db.Column(db.Integer, db.ForeignKey('graded_assignment_content.content_id'), nullable=False)
    question_id = db.Column(db.Integer, db.ForeignKey('mcq.question_id'), nullable=False)
    marked_option_id = db.Column(db.Integer, db.ForeignKey('mcq_option.option_id'), nullable=False)
    is_correct = db.Column(db.Boolean, default=False)

# Information for each video. Simple enough.

class VideoModule(db.Model):
    __tablename__ = 'video_module'
    video_id = db.Column(db.Integer, primary_key=True)
    content_id = db.Column(db.Integer, db.ForeignKey('weekly_content.content_id'), nullable=False)
    week_id = db.Column(db.Integer, db.ForeignKey('week.week_id'), nullable=False)
    title = db.Column(db.String(50), nullable=False)
    sequence_no = db.Column(db.Integer, nullable=False)
    transcript_uri = db.Column(db.String(100), nullable=False)
    transcript_uri = db.Column(db.String(100))