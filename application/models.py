from flask_security import UserMixin, RoleMixin
from enum import Enum
from flask_sqlalchemy import SQLAlchemy

db = SQLAlchemy()

class Course(db.Model): 
    '''
    A class to represent the course offered by IITM.

    Attributes:
        course_id (int): Auto-generated integer that acts as an identifier in the table.
        course_title (str): The actual name of the course.
    '''

    __tablename__ = 'course'
    course_id = db.Column(db.Integer, primary_key=True, autoincrement=True)
    course_title = db.Column(db.String(100), nullable=False, unique=True)

class Week(db.Model): 
    '''
    A class to represent a collection of items in a :class:`Course`.\n
    It would be mainly used to represent the weeks in a course, thus the name ``Week``.
    Addionally it could be used to represent other content like "Course Introduction", "Additional Content" etc.
    
    Attributes:
        week_id (int): Auto-generated integer that acts as an identifier in the table.
        course_id (int): The ID of the course to which the week belongs.
        week_name (str): The name of the week/heading.
        begin_date (date): The date when the week begins. It will be only displayed once it has begin.
    '''

    __tablename__ = 'week'
    week_id = db.Column(db.Integer, primary_key=True, autoincrement=True)
    course_id = db.Column(db.Integer, db.ForeignKey(Course.course_id, onupdate='CASCADE', ondelete='CASCADE'), nullable=False)
    week_name = db.Column(db.String(50), nullable=False)
    begin_date = db.Column(db.DateTime(timezone=True), nullable=False)

class User(db.Model, UserMixin):
    '''
    A class to represent a student enrolled in a course.

    Attributes:
        student_id (int): Auto-generated integer that acts as an identifier in the table.
        student_name (str): The name of the student.
    '''

    __tablename__ = 'student'
    student_id = db.Column(db.Integer, primary_key=True, autoincrement=True)
    name = db.Column(db.String(50), nullable=False)
    email = db.Column(db.String(50), unique=True, nullable=False)
    password = db.Column(db.String(255), nullable=False)
    active = db.Column(db.Boolean, nullable=False)
    fs_uniquifier = db.Column(db.String(64), unique=True, nullable=True)
    last_login_date = db.Column(db.DateTime(timezone=True))
    roles = db.relationship('Role', secondary='roles_users', backref=db.backref('users', lazy='dynamic'))

class Role(db.Model, RoleMixin):
    id = db.Column(db.Integer(), primary_key=True, autoincrement=True)
    name = db.Column(db.String(10), unique=True, nullable=False)
    description = db.Column(db.String(50))

class RolesUsers(db.Model):
    __tablename__ = 'roles_users'
    id = db.Column(db.Integer(), primary_key=True)
    user_id = db.Column(db.Integer(), db.ForeignKey(User.student_id))
    role_id = db.Column(db.Integer(), db.ForeignKey(Role.id))

class WeeklyContentType(Enum):
    '''
    An enum class to represent the type of content in the :class:`WeeklyContent`.
    '''
    module_content_type = 'module_content_type'
    assignment_content_type = 'assignment_content_type'
    graded_assignment_content_type = 'graded_assignment_content_type'
    programming_content_type = 'programming_content_type'
    graded_programming_content_type = 'graded_programming_content_type'
    html_page_content_type = 'html_page_content_type'

class WeeklyContent(db.Model):
    '''
    A class to represent a single content of a week in a course.
    It includes weekly module, assignments etc, html-pages etc.

    Attributes:
        content_id (int): Auto-generated integer that acts as an identifier in the table.
        week_id (int): The ID of the :class:`Week` to which the content belongs.
        title (str): The title of the content. For example "Programming Assignment 1", "Introduction to Variables in Python" etc.
        arrangement_order (int): The relative positioning in which the content is arranged in the :class:`Week`.
        content_type (str): The type of the content. It is an enum of :class:`WeeklyContentType`.
    '''

    __tablename__ = 'weekly_content'
    content_id = db.Column(db.Integer, primary_key=True, autoincrement=True)
    week_id = db.Column(db.Integer, db.ForeignKey(Week.week_id, onupdate='CASCADE', ondelete='CASCADE'), nullable=False)
    title = db.Column(db.String(500), nullable=False)
    arrangement_order = db.Column(db.Integer, nullable=False)
    content_type = db.Column(db.String(50), nullable=False)

    __table_args__ = (
        db.UniqueConstraint('week_id', 'arrangement_order'),
    )

class SavedMCQ(db.Model):
    '''
    A class to represent a saved MCQ question by a student.
    From the questions generated by AI, only the ones saved by the student will be stored here.

    Attributes:
        question_id (int): Auto-generated integer that acts as an identifier in the table.
        question_text (str): The text of the question.
        week_id (int): The ID of the :class:`Week` to which the question belongs.
        student_id (int): The ID of the :class:`Student` who saved the question
    '''

    __tablename__ = 'saved_mcq_question'
    question_id = db.Column(db.Integer, primary_key=True, autoincrement=True)
    question_text = db.Column(db.String(5000), nullable=False)
    week_id = db.Column(db.Integer, db.ForeignKey(Week.week_id, onupdate='CASCADE', ondelete='CASCADE'), nullable=False)
    student_id = db.Column(db.Integer, db.ForeignKey(User.student_id, onupdate='CASCADE', ondelete='CASCADE'), nullable=False)

class SavedMCQOption(db.Model):
    '''
    A class to represent the options of a saved MCQ question by a student.
    From the questions generated by AI, only the ones saved by the student will be stored here.

    Attributes:
        option_id (int): Auto-generated integer that acts as an identifier in the table.
        question_id (int): The ID of the :class:`SavedMCQ` to which the option belongs.
        option_text (str): The text of the option.
        is_correct (bool): A boolean value to represent if the option is correct or not.
    '''
    __tablename__ = 'saved_mcq_option'
    option_id = db.Column(db.Integer, primary_key=True, autoincrement=True)
    question_id = db.Column(db.Integer, db.ForeignKey(SavedMCQ.question_id, onupdate='CASCADE', ondelete='CASCADE'), nullable=False)
    option_text = db.Column(db.String(500), nullable=False)
    is_correct = db.Column(db.Boolean, default=False)

class AssignmentScore(db.Model):
    '''
    A class to represent the score of a student in the Graded Assignments.

    Attributes:
        student_id (int): The ID of the :class:`Student` who scored.
        course_id (int): The ID of the :class:`Course` to which the course belongs.
        assignment_id (int): The ID of the :class:`WeeklyContent` to which the score belongs.
        score (int): The score of the student in the assignment in percentage value.
    '''

    __tablename__ = 'assignment_score'
    student_id = db.Column(db.Integer, db.ForeignKey(User.student_id, onupdate='CASCADE', ondelete='CASCADE'), primary_key=True)
    course_id = db.Column(db.Integer, db.ForeignKey(Course.course_id), primary_key=True)
    assignment_id = db.Column(db.Integer, db.ForeignKey(WeeklyContent.content_id), primary_key=True)
    score = db.Column(db.Integer, nullable=False)

class CoursePageContent(db.Model):
    '''
    A class to represent the content of a course page in form of HTML.
    
    Attributes:
        content_id (int): The ID of the :class:`WeeklyContent` it represents.
        html_content (str): The HTML content of the course page.
    '''
    __tablename__ = 'course_page_content'
    content_id = db.Column(db.Integer, db.ForeignKey(WeeklyContent.content_id, onupdate='CASCADE', ondelete='CASCADE'), primary_key=True)
    html_content = db.Column(db.String)

class GradedAssignmentContent(db.Model):
    '''
    A class to represent a graded assignment in a :class:`Week`.
    It includes the deadline for the assignment.

    Attributes:
        content_id (int): The ID of the :class:`WeeklyContent` it represents.
        deadline (datetime): The deadline for the assignment.
    '''

    __tablename__ = 'graded_assignment_content'
    content_id = db.Column(db.Integer, db.ForeignKey(WeeklyContent.content_id, onupdate='CASCADE', ondelete='CASCADE'), primary_key=True, nullable=False)
    deadline = db.Column(db.DateTime(timezone=True), nullable=False)

class SubmittedAssignment(db.Model):
    '''
    A class to represent the submissions made by students for the graded assignments (mcq/programming).
    
    Attributes:
        submission_id (int): Auto-generated integer that acts as an identifier in the table.
        student_id (int): The ID of the :class:`Student` who submitted the assignment.
        assignment_id (int): The ID of the :class:`WeeklyContent` that represents this assignment.
    '''

    __tablename__ = 'submitted_assignment'
    submission_id = db.Column(db.Integer, primary_key=True, autoincrement=True)
    assignment_id = db.Column(db.Integer, db.ForeignKey(WeeklyContent.content_id, onupdate='CASCADE', ondelete='CASCADE'))
    student_id = db.Column(db.Integer, db.ForeignKey(User.student_id, onupdate='CASCADE', ondelete='CASCADE'), nullable=False)

class GradedProgrammingAssignmentContent(db.Model):
    '''
    A class to represent a graded programming assignment in a :class:`Week`.
    It includes the deadline for the assignment and the problem statement.

    Attributes:
        content_id (int): The ID of the :class:`WeeklyContent` it represents.
        deadline (datetime): The deadline for the assignment.
        problem_statement (str): The problem statement for the assignment.
    '''
    __tablename__ = 'graded_programming_assignment_content'
    content_id = db.Column(db.Integer, db.ForeignKey(WeeklyContent.content_id, onupdate='CASCADE', ondelete='CASCADE'), primary_key=True)
    deadline = db.Column(db.DateTime(timezone=True), nullable=False)
    problem_statement = db.Column(db.String, nullable=False)

class MCQ(db.Model):
    '''
    A class to represent a regular MCQ question that could belong to either ``WeeklyContentType.assignment_content_type`` or ``WeeklyContentType.graded_assignment_content_type``.
    
    Attributes:
        question_id (int): Auto-generated integer that acts as an identifier in the table.
        assignment_id (int): The ID of the :class:`WeeklyContent` to which the question belongs.
        question_text (str): The text/problem-statement of the question.
        question_score (int): The score point of the question.
    '''

    __tablename__ = 'mcq_question'
    question_id = db.Column(db.Integer, primary_key=True, autoincrement=True)
    assignment_id = db.Column(db.Integer, db.ForeignKey(WeeklyContent.content_id, onupdate='CASCADE', ondelete='CASCADE'), nullable=False)
    question_text = db.Column(db.String(5000), nullable=False)
    question_score = db.Column(db.Integer, nullable=False)

class ProgrammingAssignmentContent(db.Model):
    '''
    A class to represent a programming assignment from :class:`WeeklyContent`.

    Attributes:
        content_id (int): The ID of the :class:`WeeklyContent` it represents.
        problem_statement (str): The problem statement for the assignment.
    '''
    __tablename__ = 'programming_assignment_content'
    content_id = db.Column(db.Integer, db.ForeignKey(WeeklyContent.content_id, onupdate='CASCADE', ondelete='CASCADE'), primary_key=True)
    problem_statement = db.Column(db.Text, nullable=False)

class TestCase(db.Model):
    '''
    A class to represent a test case for a programming assignments (graded/practice).

    Attributes:
        test_case_id (int): Auto-generated integer that acts as an identifier in the table.
        assignment_id (int): The ID of the :class:`WeeklyContent` assignment to which the test case belongs.
        input_text (str): The input text for the test case.
        expected_output (str): The expected output for the test case.
        memory_limit (int): The memory limit for the test case in KB.
        time_limit (int): The time limit for the test case in seconds.
        is_private (bool): A boolean value to represent if the test case is private or not. Private test cases can only exist for Graded Programming Assignments.
    '''

    __tablename__ = 'programming_test_case'
    test_case_id = db.Column(db.Integer, primary_key=True, autoincrement=True)
    assignment_id = db.Column(db.Integer, db.ForeignKey(WeeklyContent.content_id), nullable=False)
    input_text = db.Column(db.Text, nullable=False)
    expected_output = db.Column(db.Text, nullable=False)
    memory_limit = db.Column(db.Integer)
    time_limit = db.Column(db.Integer)
    is_private = db.Column(db.Boolean, default=False)

class VideoModule(db.Model):
    '''
    A class to represent a video module in a :class:`Week`.
    It includes the video ID, transcript URI and tags URI.

    Attributes:
        content_id (int): The ID of the :class:`WeeklyContent` it represents.
        video_id (str): The ID of the video provided by the youtube. For example, `qCbMuc-KY08` for the video url `https://www.youtube.com/watch?v=qCbMuc-KY08`
        transcript_uri (str): The URI of the transcript. It allows null values to accomodate the situation when the transcript of the video is not available.
        tags_uri (str): The URI of the file that contains the topic tags of the video in format of tags seperated by commas. In case the file does not exist, it can be generated by the AI and then stored into the file system and then the URI could be updated in the database.
    '''

    __tablename__ = 'video_module'
    content_id = db.Column(db.Integer, db.ForeignKey(WeeklyContent.content_id, onupdate='CASCADE', ondelete='CASCADE'), primary_key=True)
    video_id = db.Column(db.String(50), nullable=False)
    transcript_uri = db.Column(db.String(500), nullable=True)
    tags_uri = db.Column(db.String(500), nullable=True)

class MCQOption(db.Model):
    __tablename__ = 'mcq_option'
    option_id = db.Column(db.Integer, primary_key=True, autoincrement=True)
    question_id = db.Column(db.Integer, db.ForeignKey(MCQ.question_id, onupdate='CASCADE', ondelete='CASCADE'), nullable=False)
    option_text = db.Column(db.String(500), nullable=False)
    is_correct = db.Column(db.Boolean, default=False)

class StudentGradedMCQAssignmentResult(db.Model):
    '''
    A class to represent the result of a student in a graded MCQ assignment. This class stores for which question which options was selected by student in the graded assignment and if the option was correct. This will be used to compute the score of the student in the assignment and to display the options marked by student after the deadline of the assignment.

    Attributes:
        student_id (int): The ID of the :class:`Student` who attempted the assignment.
        assignment_id (int): The ID of the :class:`WeeklyContent` Graded assignment to which the result belongs.
        question_id (int): The ID of the :class:`MCQ` question to which the result belongs.
        marked_option_id (int): The ID of the :class:`MCQOption` marked by the student.
        is_correct (bool): A boolean value to represent if the marked option was correct or not.
    '''

    __tablename__="student_graded_mcq_assignment_result"
    student_id = db.Column(db.Integer, db.ForeignKey(User.student_id, onupdate='CASCADE', ondelete='CASCADE'), primary_key=True)
    assignment_id = db.Column(db.Integer, db.ForeignKey(WeeklyContent.content_id, onupdate='CASCADE', ondelete='CASCADE'), primary_key=True)
    question_id = db.Column(db.Integer, db.ForeignKey(MCQ.question_id, onupdate='CASCADE', ondelete='CASCADE'), primary_key=True)
    marked_option_id = db.Column(db.Integer, db.ForeignKey(MCQOption.option_id, onupdate='CASCADE', ondelete='CASCADE'), nullable=False)
    is_correct = db.Column(db.Boolean, nullable=False)
